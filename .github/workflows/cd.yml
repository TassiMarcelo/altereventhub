name: Deploy continuo
#Primero verifica si los test de la integracion continua pasa correctamente
on:
  workflow_run:
    workflows: ["IntegraciÃ³n continua"]
    types:
      - completed
  release:
    types: [published]

env:
  DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/eventhub

jobs:
  build-and-deploy:
    name: Build Docker Image and Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'release' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          buildkitd-flags: --allow-insecure-entitlement security.insecure
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get version tags
        id: get-tags
        run: |
          echo "DATE_TAG=$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV
          if [ "${{ github.event_name }}" = "release" ]; then
            echo "RELEASE_TAG=${{ github.event.release.tag_name }}" >> $GITHUB_ENV
          fi
        #Construye la imagen de Docker y la pushea
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:latest
            ${{ env.DOCKER_IMAGE }}:${{ env.DATE_TAG }}
            ${{ env.RELEASE_TAG && format('{0}:{1}', env.DOCKER_IMAGE, env.RELEASE_TAG) || '' }}
          labels: |
            org.opencontainers.image.created=${{ steps.get-tags.outputs.date }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
        #Verifica si la imagen de Docker es correcta
      - name: Verify Docker image
        run: |
            docker pull ${{ env.DOCKER_IMAGE }}:${{ env.DATE_TAG }}
            docker run --rm ${{ env.DOCKER_IMAGE }}:${{ env.DATE_TAG }} python manage.py check
        #Deploy a Render
      - name: Trigger deploy on Render
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" -X POST ${{ secrets.RENDER_DEPLOY_HOOK_URL }})
          if [ "$response" -ne 200 ]; then
            echo "Error triggering Render deploy. Status code: $response"
            exit 1
          fi
          echo "Render deploy triggered successfully"
