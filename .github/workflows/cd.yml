name: Deploy Continuo

on:
  workflow_run:
    workflows: ["IntegraciÃ³n continua"]  # Nombre exacto del workflow de CI (case-sensitive)
    types: [completed]
  release:
    types: [published]

env:
  DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/eventhub

jobs:
  build-and-deploy:
    name: Build Docker Image and Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 30
    # Solo ejecutar si el CI pasa O si es un release (evita duplicados)
    if: >
      (github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.event == 'push') ||
      github.event_name == 'release'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Generate tags
        id: tags
        run: |
          echo "DATE_TAG=$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT
          if [[ "${{ github.event_name }}" == "release" ]]; then
            echo "RELEASE_TAG=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          fi
          echo "SHORT_SHA=${GITHUB_SHA:0:7}" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:latest
            ${{ env.DOCKER_IMAGE }}:${{ steps.tags.outputs.DATE_TAG }}
            ${{ env.DOCKER_IMAGE }}:${{ steps.tags.outputs.SHORT_SHA }}
            ${{ steps.tags.outputs.RELEASE_TAG && format('{0}:{1}', env.DOCKER_IMAGE, steps.tags.outputs.RELEASE_TAG) || '' }}
          labels: |
            org.opencontainers.image.source=${{ github.repository_url }}
            org.opencontainers.image.version=${{ steps.tags.outputs.RELEASE_TAG || 'dev' }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Verify Docker image
        run: |
          docker pull ${{ env.DOCKER_IMAGE }}:${{ steps.tags.outputs.DATE_TAG }}
          docker run --rm ${{ env.DOCKER_IMAGE }}:${{ steps.tags.outputs.DATE_TAG }} \
            python manage.py check --deploy

      - name: Trigger Render Deploy
        run: |
          curl -X POST \
            "${{ secrets.RENDER_DEPLOY_HOOK_URL }}" \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{"serviceId": "${{ secrets.RENDER_SERVICE_ID }}"}'