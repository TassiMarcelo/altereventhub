name: Deploy continuo

on:
  workflow_run:
    workflows: ["Integracion continua"]
    types:
      - completed

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/eventhub
          tags: |
            type=ref,event=tag
            type=raw,value=latest
            type=sha
          labels: |
            org.opencontainers.image.title=EventHub
            org.opencontainers.image.description=Venta de entradas
            org.opencontainers.image.vendor=UTN-FRLP
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            PYTHON_VERSION=3.12

  deploy-render:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure deployment to Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
          IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/eventhub
          IMAGE_TAG: ${{ needs.build-and-push.outputs.image-tag }}
        run: |
          # Update service configuration with new image
          echo "Updating Render service configuration..."
          curl -X PATCH \
            "https://api.render.com/v1/services/$RENDER_SERVICE_ID" \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{
              "image": {
                "ownerId": "${{ secrets.DOCKERHUB_USERNAME }}",
                "imageName": "eventhub",
                "imageTag": "$(echo "$IMAGE_TAG" | cut -d',' -f1 | tr -d '[]"')"
              }
            }'

          # Trigger deployment
          echo "Triggering deployment..."
          curl -X POST \
            "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys" \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{"clearCache": true}'

          echo "Deployment successfully triggered!"